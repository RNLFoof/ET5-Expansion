<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">// Use song in the creation code to specify.
// Ex. song = "ClockTower" to play ClockTowerIntro and ClockTowerLoop
// Starts by playing ClockTowerIntro, then plays ClockTowerLoop when it's done. See the step event to find out about how that's timed.
// Check this out https://github.com/arkrow/PyMusicLooper to make loops.

// There's probably a lib somewhere that would be better for this. But, while I cared enough to put way to much effort into this, I didn't care enough to redo everything having to do with saudio.dll.
// To smoothly transition, the intro has 5s of the loop at the end, and the loop is seeked to line up properly.

intromid = song + "Intro"
loopmid = song + "Loop"
scr_LoadMusicLater(intromid);
scr_LoadMusicLater(loopmid);
mid = song + "Intro";
introisover = false;

alarm[1] = 999; // Set to 999 because the step event will correct it anyway

// Stop if music is disabled
if global.musicon = 0 exit;

// Stop if this song is already playing
if global.cmusic = string(intromid) exit; // cmusic = current music, I think mid used to mean music ID but that's not really accurate anymore
if global.cmusic = string(loopmid) exit;

// Stop all other music
saud_StopAll();

// Play this song
saud_Seek(0,string(mid));
saud_Play(string(mid));

// Remember that this song is already playing
global.cmusic = string(mid);

saud_Load(working_directory + "\Music\ClockTowerEnd.wav", "OtherEnd")
</argument>
      </arguments>
    </action>
  </actions>
</event>
