<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">//Enclosing a part of a message in square brackets [] will cause the 
//enclosed string to be highlighted.

//Placing an asterisk * at the end of a message tells the code that
//the current message is the last message.

//Putting an exponent sign ^ at the end of a message followed by a number will cause the 
//next position to be at the number. If it is followed by a number, a comma, and then another number,
//then the code will open up a box for the player to choose which path to take.
//The first number is for the yes position, and the second is for the no position.

//If you surround a number by a less than sign &lt; and a greater then sign &gt;, the code will do a manual
//pause for the  specified number of steps.

//These are the actual messages.
str[0] = "Well, [App,] it's been three years."
str[1] = "Uhh, do I know you?"
str[2] = "WHAT?! You don't remember me?!"
str[3] = "Well, it has been a while."
str[4] = "I'm [Motewolon,] the ultimate creator of toasters! I was built by [Roaster] to supply him with an army of sentient toast and toasters! Well, the toast isn't actually sentient. They're just corrosive rubber occasionally equipped with homing devices..."
str[5] = "[Motewolon?] Sounds familiar. So, why are you helping the [Evil Toaster] if you're loyal to [Roaster?]"
str[6] = "I'm fine with helping anyone as long as it's against apples. Right now, I'm creating armies for both the [Evil Toaster] and [Roaster.] Luckily, I didn't make the two armies opposed to each other like their leaders currently are."
str[7] = "Well, I still don't remember who you are."
str[8] = "Come on! I'm [Motewolon!] You may not have seen me a while, but you can clearly tell I'm IMPORTANT because of my evil-looking color scheme! I was that robotic black apple guarding [Shaman's] cage on your first real adventure, remember?!"
str[9] = "Ehh..."
str[10] = "GAAAH! I've really been causing you trouble all along, so it's weird that you don't think I'm important enough to commit to memory. Look, I even came up with new types of toasters while you were time traveling."
str[11] = "How did the toasters even reach me? Did they have a [Worminator] too?"
str[12] = "Nah. They used the [Caginator,] which is capable of sending its caged victims and other things across space and time."
str[13] = "Well then, I suppose you have been mildly important, mister... what's your name again?"
str[14] = "GAAH! FORGET IT! OR DON'T FORGET IT, ACTUALLY, BECAUSE NOW THAT I'VE KNOCKED YOUR BROWN FRIEND FAR, FAR OUT OF THE WAY, I'M GOING TO CRUSH YOU MYSELF AFTER ALL OF MY TOASTERS HAVE FAILED TO DO SO!!! It's been three years. Now stand still..."
str[15] = "Uh, sure, okay.*"
//These are the headshots that correspond to each message.
img[0] = BlackNoAnim
img[1] = AppFace
img[2] = BlackNoAnim
img[3] = AppFace
img[4] = BlackNoAnim
img[5] = AppFace
img[6] = BlackNoAnim
img[7] = AppFace
img[8] = BlackNoAnim
img[9] = AppFace
img[10] = BlackNoAnim
img[11] = AppFace
img[12] = BlackNoAnim
img[13] = AppFace
img[14] = BlackNoAnim
img[15] = AppFace
//These are the names of the person talking in each message.
name[0] = "Motewolon"
name[1] = "App"
name[2] = "Motewolon"
name[3] = "App"
name[4] = "Motewolon"
name[5] = "App"
name[6] = "Motewolon"
name[7] = "App"
name[8] = "Motewolon"
name[9] = "App"
name[10] = "Motewolon"
name[11] = "App"
name[12] = "Motewolon"
name[13] = "App"
name[14] = "Motewolon"
name[15] = "App"
//As you can see, it is quite easy to add extra details for
//each message simply by adding an extra array. 
//It's that simple!

//This determines the number of pixels each line can be.
line_length = 420
//This controls the speed of the the text.
text_speed = 1
//This is the  x position in which the string starts at.
string_x = 16
//This is the y position in which the string starts at.
string_y = 48
//This determines the vertical spacing between lines.
//When set to zero, the spacing will only be the string's height.
vertical_spacing = 0
//This is the x position of the question box.
question_box_x = 32
//This is the y position of the question box.
question_box_y = 128
//This is the x position of the text drawn in relevance to question_box_x.
question_x = 18
//This is the y position of the text drawn in relevance to question_box_y.
question_y = 7
//This is the x position of the names.
name_x = 50
//This is the y position of the names.
name_y = 22
//This is the x position of the headshot.
headshot_x = 12
//This is the y position of the headshot.
headshot_y = 12
//This is the vertical spacing in between "Yes" and "No".
question_vert_spacing = 2
//This is the x postion in relevance to question_box_x.
highlight_x = 2
//If this charcter is detected, initiate a highlight.
highlight_open_character = "["
//This character determines the end of a highlight. Anything enclosed
//will be highlighted.
highlight_close_character = "]"
//If this charcter is detected, end messages.
end_character = "*"
//If this charcter is detected, ask question or jump to next position.
jump_character = "^"
//If this character is detected, initiate a manual pause.
pause_open_character = "&lt;"
//This character determines the number. The enclosed number
//is the length of the manual pause.
pause_close_character = "&gt;"


//The following variables do not need to be changed and are only used
//by the code.



//This determins if the messages end.
message_end = 0
//This determines when the typing is finished.
type_end = 0
//This determines if the meesage is a question message.
message_question = 0
//This is the target position if yes is selected.
yes_position = 0
//This is the target position if no is selected.
no_position = 0
//This is the option selected by the user.
question_selection = 1
//This detemins if the message is a jump message.
message_jump = 0
//This is the position of the next message.
jump_position = 0
//This is the string that is going to be displayed. It contains the
//modified version of the actual string.
display_string = ""
//This states the current position we are at in str[x] for adding
//characters into display_string.
position = 0
//This states the current position we are in display_string. This is
//used to prevent line breaks in the middle of a word.
display_position= 0
//This counter tells us when it's time to make a line break.
width_counter = 0
//This finds the last space.
last_space = 0
//The array index of the message that is currently being displayed.
message_display = 0
//This is used to count the number of phrases that will be highlighted.
highlight_number = 0
//This stores the starting position of the highlighted text.
highlight_position[0] = 0
//This stores the length of the highlighted text.
highlight_length[0] = 0
//This is used to count the number of manual pauses that are in the message.
pause_number = 0
//This stores the position of the manual pause.
pause_position[0] = 0
//This stores the number of steps the manual pause lasts.
pause_length[0] = 0
//This variable stores the edited message.
current_string = ""


//Gives the user a second to realize the window has opened before the text
//starts typing out.
alarm[0] = 10
</argument>
      </arguments>
    </action>
    <action id="611" library="1">
      <!--action name: Variable-->
      <kind>VARIABLE</kind>
      <allowRelative>true</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">nexted</argument>
        <argument kind="EXPRESSION">0</argument>
      </arguments>
    </action>
    <action id="201" library="1">
      <!--action name: Create_Object-->
      <kind>NORMAL</kind>
      <allowRelative>true</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_create_object</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="GMOBJECT">Uncontrollable</argument>
        <argument kind="EXPRESSION">0</argument>
        <argument kind="EXPRESSION">0</argument>
      </arguments>
    </action>
  </actions>
</event>
