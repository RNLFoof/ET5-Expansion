<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">//if not place_meeting(x,y-1,MainApple) &amp;&amp; not place_meeting(mate.x,mate.y-1,MainApple) &amp;&amp; not place_meeting(x,y+4,MainApple) &amp;&amp; not place_meeting(mate.x,mate.y+4,MainApple)

with(MainApple)
{
    if not place_meeting(x,y+vspeed+other.tolerance,BasicWall) other.halfwall = 0;
    else other.halfwall = 1;
}

if not collision_rectangle(x,y-4,x+32,y+36,MainApple,true,false) &amp;&amp; not collision_rectangle(mate.x,mate.y-4,mate.x+32,mate.y+36,MainApple,true,false)
{
    if yrl &lt; yi yrl += 1;
    if yrl &gt; yi yrl -= 1;
}

if not instance_exists(MainApple) exit;

if place_free(xrl,yrl+tolerance) &amp;&amp; MainApple.air = 0
{
    with(mate) if place_free(xrl,yrl-tolerance)
    {
        with(mate)
        {
            if place_meeting(x,y-1,MainApple)
            {
                yrl += tolerance;
                mate.yrl -= tolerance;
            }
            if place_meeting(x,y-1,MainApple) &amp;&amp; halfwall = 0 with(MainApple) y += other.tolerance;
        }
    }
}

x = xrl;
y = yrl;
</argument>
      </arguments>
    </action>
  </actions>
</event>
